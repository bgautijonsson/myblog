{
  "hash": "dfc457319e2b0c68733b26715e2584f4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Fetching FTP data from the Ceda Archives\"\nsubtitle: \"Using R and FTP to programmatically fetch a large amount of data for processing\"\ndescription: |\n  For my PhD modeling I needed to fetch a large amount of data from the CEDA Archive, specifically I use hourly precipitation projections from [UKCP Local Projections on a 5km grid over the UK for 1980-2080](https://catalogue.ceda.ac.uk/uuid/e304987739e04cdc960598fa5e4439d0). The hourly precipitation projections are stored in 720 files that are all approximately 120mb to 130mb. Here I write out my processing in case someone needs help with doing something similar.\nauthor: \n    -   name: \"Brynjólfur Gauti Guðrúnar Jónsson\"\n        url: \"bggj.is\"\n        affiliation: \"Tölfræði, Raunvísindadeild Háskóla Íslands\"\n        affiliation-url: \"https://www.hi.is/tolfraedi_0\"\ndate: \"2023/02/03\"\nformat: \n    html:\n        code-fold: true\n        toc: true\n        toc-location: left\nexecute: \n  echo: true\n  warning: false\neditor: source\ncategories:\n    - english\n    - R\n    - phd\n    - big data\n    - scraping\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(bggjphd)\ntheme_set(theme_bggj())\n```\n:::\n\n\n# UKCP Projections\n\n![Figure 1. Screenshot of the data page](Figures/ceda_data.png){.column-margin}\n\nFor my PhD modeling I needed to fetch a large amount of data from the [CEDA Archive FTP server](https://help.ceda.ac.uk/article/280-ftp), specifically I use hourly precipitation projections from [UKCP Local Projections on a 5km grid over the UK for 1980-2080](https://catalogue.ceda.ac.uk/uuid/e304987739e04cdc960598fa5e4439d0). The hourly precipitation projections are stored in 720 files that are all approximately 120mb to 130mb. \n\nI could go through the list of files and click on each one to download it, but being a lazy programmer that's not good enough, so I wrote a program that \n\n* uses my CEDA FTP credentials to download the 720 files one at a time into a temporary file\n* does some transformations on it *(I only need the yearly maximums of hourly precipitation per location)*\n* deletes the temporary file and moves onto the next one\n\nThe hardest part was getting my FTP connection to work, so I thought I might write out my process so that some future googlers might find this post.\n\n# How-To\n\n## Setup\n\nThe first things you're going to need are the following:\n\n* A CEDA Archive account\n* A CEDA FTP password\n* The location of the files you want to download.\n- On your dataset page, press download and navigate to the subset you want to fetch\n\n## File Location\n\nIn my case the 720 files are located at\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nurl <- \"ftp://ftp.ceda.ac.uk/badc/ukcp18/data/land-cpm/uk/5km/rcp85/01/pr/1hr/v20210615/\"\n```\n:::\n\n\n## Authentication\n\nWe're going to need to input our username and password into the URL to download the data. In order to hide my login info when coding I put it in my R Environment *(easy to edit with `usethis::edit_r_environ()`)* and can thus write a function to input it in requests. I never assign my info to variables, but rather just use functions to input them.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nuserpwd <- function() {\n  str_c(\n    Sys.getenv(\"CEDA_USR\"), \n    Sys.getenv(\"CEDA_PWD\"), \n    sep = \":\"\n  )\n}\n```\n:::\n\n\nNow we can send a request to the FTP server in order to get a list of all the files we want to download\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nfilenames <- RCurl::getURL(\n  url,\n  userpwd = userpwd(),\n  dirlistonly = TRUE\n)\n```\n:::\n\n\nAs you can see below, the result is given to us as one long string.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstringr::str_sub(\n  filenames,\n  start = 1,\n  end = 160\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"pr_rcp85_land-cpm_uk_5km_01_1hr_19801201-19801230.nc\\npr_rcp85_land-cpm_uk_5km_01_1hr_19810101-19810130.nc\\npr_rcp85_land-cpm_uk_5km_01_1hr_19810201-19810230.nc\\np\"\n```\n\n\n:::\n:::\n\n\n\n## Cleaning up the file names\n\nWe get a single string with all the file names. It's easy to split them up into separate strings ands remove the trailing empty line.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nfiles <- filenames |>\n  stringr::str_split_1(pattern = \"\\n\")\n\nfiles <- files[-length(files)]\n\nhead(files)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"pr_rcp85_land-cpm_uk_5km_01_1hr_19801201-19801230.nc\"\n[2] \"pr_rcp85_land-cpm_uk_5km_01_1hr_19810101-19810130.nc\"\n[3] \"pr_rcp85_land-cpm_uk_5km_01_1hr_19810201-19810230.nc\"\n[4] \"pr_rcp85_land-cpm_uk_5km_01_1hr_19810301-19810330.nc\"\n[5] \"pr_rcp85_land-cpm_uk_5km_01_1hr_19810401-19810430.nc\"\n[6] \"pr_rcp85_land-cpm_uk_5km_01_1hr_19810501-19810530.nc\"\n```\n\n\n:::\n:::\n\n\n## Writing data processing functions\n\nNow comes the tricky part. We are going to download 720 files *(one for each month)* that are around 120MB each. If we just download them and keep them on our hard drive that's going to be upwards of 70GB. Instead of doing that we will use the function `process_data()` below to do the following:\n\n* For each dataset\n1. Create a temporary file\n2. Download the data into the temporary file\n3. For each location, throw away all measurements except for the maximum\n4. Create a tidy table with information about the coordinates of the location, the max precipitation and the observation date-range\n5. Delete the temporary file\n\nBefore we can iterate we will need to create a new helper function. Since we will now be using `download.file()` to download our data sets, we need to input our username and password into the URL. As before, in order to not reveal our information we use functions instead of creating global variables in the environment. Thus we won't accidentally leak our information when for example taking screenshots.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nmake_download_path <- function(filename) {\n  url |>\n    stringr::str_replace(\"//\", stringr::str_c(\"//\", userpwd(), \"@\")) |>\n    stringr::str_c(filename)\n}\n```\n:::\n\n\nThe data files are stored in `.nc` form. The `ncdf4` package lets us connect to these kinds of files and pull in the variables we need.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nprocess_data <- function(filename) {\n  \n  Sys.sleep(0.1)\n  \n  from_to <- stringr::str_extract_all(filename, \"_[0-9]{8}-[0-9]{8}\")[[1]] |>\n    stringr::str_replace(\"_\", \"\") |>\n    stringr::str_split_1(\"-\")\n  \n  from <- as.Date(from_to[1], format = \"%Y%m%d\")\n  to <- from + lubridate::months(1, abbreviate = FALSE) - lubridate::days(1)\n  \n  tmp <- tempfile()\n  \n  download.file(\n    make_download_path(filename),\n    tmp,\n    mode = \"wb\",\n    quiet = TRUE\n  )\n  \n  temp_d <- ncdf4::nc_open(tmp)\n  \n  max_pr <- ncdf4::ncvar_get(temp_d, \"pr\") |>\n    apply(MARGIN = c(1, 2), FUN = max)\n  \n  lat <- ncdf4::ncvar_get(temp_d, \"latitude\")\n  long <- ncdf4::ncvar_get(temp_d, \"longitude\")\n  \n  out <- tidyr::crossing(\n    proj_x = 1:180,\n    proj_y = 1:244,\n    from_date = from,\n    to_date = to\n  ) |>\n    dplyr::arrange(proj_y, proj_x) |>\n    dplyr::mutate(\n      precip = as.numeric(max_pr),\n      longitude = as.numeric(long),\n      latitude = as.numeric(lat),\n      station = row_number()\n    )\n  \n  out\n}\n```\n:::\n\n\n## Putting it all together\n\nHaving defined our function we throw it into `purrr::map_dfr()` *(`map_dfr()` tells R that the output should be a dataframe in which the iteration results are concatenated rowwise)* for iteration and say yes please to a progress bar. I could have used the `furrr` package to reduce the time by downloading multiple files in parallel, but I was afraid of getting timed out from the CEDA FTP server so I decided to just be patient.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nd <- files |>\n  purrr::map_dfr(process_data, .progress = TRUE)\n```\n:::\n\n\nHaving created our dataset we write it out to disk using everyone's favorite new format [parquet](https://arrow-user2022.netlify.app/). This way we can efficiently query the data without reading it into memory using `arrow::open_dataset()`.\n\n**This whole process took 3 hours and 21 minutes on my computer. The largest bottleneck by far was downloading the data.**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nd |>\n  arrow::write_parquet(\"monthly_data.parquet\")\n```\n:::\n\n\n## Final processing\n\nI mentioned above that I only needed the yearly data, but currently the dataset contains monthly maxima. Since I might need to do seasonal modeling later in my PhD I decided it would be smart to keep the monthly data, but it's also very easy to further summarise the data into yearly maxima.\n\nSince the data for 1980 contain only one month, I decided to not include that year as it is not really a true yearly maximum.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nd <- d |>\n  dplyr::mutate(year = lubridate::year(from_date)) |>\n  dplyr::filter(year > 1980) |>\n  dplyr::group_by(year, station, proj_x, proj_y, longitude, latitude) |>\n  dplyr::summarise(\n    precip = max(precip),\n    .groups = \"drop\"\n  )\n\nd |>\n  arrow::write_parquet(\"yearly_data.parquet\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}